AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description:  |
 Deploy a service on AWS Fargate, hosted in a public subnet, and accessible via a load balancer.
 Provide service-level networking and collect traces and metrics

Mappings:
  TaskSize:
    x-small:
      ServiceCpu: 128
      ServiceMemory: 256
      SidecarCpu: 64
      SidecarMemory: 128
    small:
      ServiceCpu: 256
      ServiceMemory: 512
      SidecarCpu: 128
      SidecarMemory: 256
    medium:
      ServiceCpu: 512
      ServiceMemory: 1024
      SidecarCpu: 256
      SidecarMemory: 512
    large:
      ServiceCpu: 1024
      ServiceMemory: 2048
      SidecarCpu: 512
      SidecarMemory: 1024
    x-large:
      ServiceCpu: 2048
      ServiceMemory: 4096
      SidecarCpu: 1024
      SidecarMemory: 2048

Resources:

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: '{{service.name}}_{{service_instance.name}}'
      Cpu: !FindInMap [TaskSize, '{{service_instance.inputs.task_size}}', Cpu]
      Memory: !FindInMap [TaskSize, '{{service_instance.inputs.task_size}}', Memory]
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: '{{environment.outputs.ECSTaskExecutionRole}}'
      TaskRoleArn: '{{environment.outputs.ECSTaskRole}}'
      ContainerDefinitions:
        - Name: '{{service_instance.name}}'
          Image: '{{service_instance.inputs.image}}'
          Cpu: !FindInMap [TaskSize, '{{service_instance.inputs.task_size}}', ServiceCpu]
          Memory: !FindInMap [TaskSize, '{{service_instance.inputs.task_size}}', ServiceMemory]
          Environment:
            {% set env_vars = service_instance.inputs.env_vars.split(';') %}
            {% for env_var in  env_vars %}
            {% set env_name, env_value = env_var.split('=') %}
            - Name: '{{ env_name|trim }}' 
              Value: '{{ env_value|trim }}'
            {% endfor %}
          PortMappings:
            - ContainerPort: '{{service_instance.inputs.port}}'
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-create-group: 'True'
              awslogs-group: '{{service.name}}/{{service_instance.name}}'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: 'fargate/service/{{service.name}}'
          DependsOn:
            - ContainerName: envoy
              Condition: HEALTHY
            - ContainerName: otel-collector
              Condition: START
        - Name: envoy
          Image: 'public.ecr.aws/appmesh/aws-appmesh-envoy:v1.19.0.0-prod'
          Cpu: !FindInMap [TaskSize, '{{service_instance.inputs.task_size}}', SidecarCpu]
          Memory: !FindInMap [TaskSize, '{{service_instance.inputs.task_size}}', SidecarMemory]
          Environment:
            - Name:  "APPMESH_RESOURCE_ARN"
              Value: "{{environment.outputs.MeshARN}}/virtualNode/{{service_instance.name}}-lb"
            - Name:  "ENABLE_ENVOY_XRAY_TRACING"
              Value: "1"
            - Name:  "ENABLE_ENVOY_STATS_TAGS"
              Value: "1"
            - Name:  "ENVOY_LOG_LEVEL"
              Value: "debug"
          HealthCheck:
            Command: 
              - "CMD-SHELL"
              - "curl -s http://localhost:9901/server_info | grep state | grep -q LIVE"
            Retries: 3
            Timeout: 2
            StartPeriod: 10
            Interval: 5
          Essential: True
          User: "1337"
          PortMappings:
            - ContainerPort: 9901
              Protocol: "tcp"
            - ContainerPort: 15000
              Protocol: "tcp"
            - ContainerPort: 15001
              Protocol: "tcp"
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-create-group: 'True'
              awslogs-group: '{{service.name}}/{{service_instance.name}}'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: 'fargate/envoy/{{service.name}}'
        - Name: otel-collector
          Image: 'public.ecr.aws/aws-observability/aws-otel-collector:latest'
          Secrets:
            - Name: "AOT_CONFIG_CONTENT"
              ValueFrom: "{{environment.outputs.OtelConfigName}}"
          Cpu: !FindInMap [TaskSize, '{{service_instance.inputs.task_size}}', SidecarCpu]
          Memory: !FindInMap [TaskSize, '{{service_instance.inputs.task_size}}', SidecarMemory]
          Essential: True
          PortMappings:
            - ContainerPort: 4317
              Protocol: "tcp"
            - ContainerPort: 55681
              Protocol: "tcp"
            - ContainerPort: 2000
              Protocol: "udp"
            - ContainerPort: 8125
              Protocol: "tcp"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-create-group: 'True'
              awslogs-group: '{{service.name}}/{{service_instance.name}}'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: fargate/otel
      ProxyConfiguration:
        ContainerName: envoy
        Type: APPMESH
        ProxyConfigurationProperties:
          - Name: 'AppPorts'
            Value: '{{service_instance.inputs.port}}'
          - Name: 'EgressIgnoredIPs'
            Value: '169.254.170.2,169.254.169.254'
          - Name: 'IgnoredUID'
            Value: '1337'
          - Name: 'ProxyEgressPort'
            Value: '15001'
          - Name: 'ProxyIngressPort'
            Value: '15000'

  VirtualNode:
    Type: AWS::AppMesh::VirtualNode
    Properties:
      MeshName: '{{environment.outputs.MeshName}}'
      Spec:
        ServiceDiscovery:
          DNS:
            Hostname: '{{service.name}}.{{environment.outputs.DnsHostname}}'
        Logging:
          AccessLog:
            File:
              Path: "/dev/stdout"
        Listeners:
          - HealthCheck:
              HealthyThreshold: 3
              IntervalMillis: 10000
              Path: "/health"
              Port: '{{service_instance.inputs.port}}'
              Protocol: http
              TimeoutMillis: 5000
              UnhealthyThreshold: 3
            PortMapping:
              Port: '{{service_instance.inputs.port}}'
              Protocol: http
        {% if service_instance.inputs.service_backends|length %}
        Backends:
          {% set backends = service_instance.inputs.service_backends.split(';') %}
          {% for backend in backends %}
          - VirtualService:
              VirtualServiceName: '{{backend}}.{{environment.outputs.DnsHostname}}'
          {% endfor %}        
        {% endif %}
      VirtualNodeName: '{{service_instance.name}}-lb'

  VirtualService:
    Type: AWS::AppMesh::VirtualService
    Properties: 
      MeshName: '{{environment.outputs.MeshName}}'
      Spec: 
        Provider:
          VirtualNode:
             VirtualNodeName: !GetAtt VirtualNode.VirtualNodeName
      VirtualServiceName: '{{service.name}}.{{environment.outputs.DnsHostname}}'
